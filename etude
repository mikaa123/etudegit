Gestion des projets transverses
===============================

## Quel type de projets ?

* Inter-équipe, inter-projet.
* Projets indépendants.
	- Front-end styleguide
	- Dictionary


## Qu'apporte git pour ces projets

* Un nouveau workflow adapté aux petits projets
* Le code change souvent
	- Créer des branches ne coûte rien
	- La possibilité de Forker un projet pour le spécialiser
* Le Code-Review fait parti du workflow
	- Il n'est pas nécessaire d'être physiquement présent
* Décentralisé: Pas besoin de créer un ticket RedMine pour commencer à coder


## Qu'apporte gitlab

* Gestion de tout ces petits projets de manière organisé.
* Chaque projet dispose de son propre traqueur de tickets.
* Chaque projet dispose de son propre wiki.
	- Permet de lister des bugs, demander des fonctionalités sans
		passer par Jira (qui lui reste utilisé pour le coeur de métier)
	- Permet de gérer les connaissances sur un projet en particulier sans
		passer par Confluence. L'accès à l'info est plus simple car directement disponible
		sur le projet.


## Objectif

* Travailler de manière ordonnée sur des "side-projets"
* Partager ses scripts, ses configurations
* Permettre aux autres de les améliorer
* De meilleurs outils, un meilleur produit.

How Git can bring us a better separation of concern
===================================================

## What is wrong with the current approach (SVN)
* Centralized repository. All the projects live there.
* Touching the history of a file impacts the whole structure.
* Introducing an error somewhere impacts everybody.
* Since there's only a single repository, it's easier to maintain a common process for
  dependency managment or building.
* This process is dictated by the most used technology for convinience. Maven is great for Java projects,
  but front-end projects shouldn't use it. But having multiple build tools in the same project is headache-prone: no win here.

## Yet this approach works and is well integrated with our tools. However:
* Commiting is a big deal: Code reviews are required (and they aren't error-proof)
* Larger tasks can make you either commit unfinished work, or not commit for extend periods.
  - Commiting unfinished work might introduce errors
  - Not commiting for long can make you risk lose your work
* Because commiting costs a lot (in term of time), we don't always ask for code reviews, and
  when we do, we want to put as much code as we can to make it worthwhile. This is especially true in front-end development:
  During a single commit, we could:
  - Modify a Java controller
  - Change a .vm file
  - Correct linting problems on a js, and
  - Correct some CSS here and there.
  Result? The whole application crashes on IE7 because of a forgotten comma, with no way to target what was the cause.

## So what now?
* We keep it like this for Java projects
* For generic, stand-alone, or front-end oriented projects, we try something now.

## Which benefits brings git out of the box
* When working on long tasks, you don't need to (and shouldn't) commit only once.
* You can commit as much as you want.
* It's great because it prevents you from sending unfinished work
* ...that can lead to weird/unexpected errors for the rest of us.

## Git, Gitlab over Svn and Jira
* Lots of different repositories, each having a unique purpose (Separation of Concern)
* Each little projects have their own lives, can be updated. This shouldn't impact other repositories.
* These projects or libraries can have APIs, manuals, or instructions. Those instructions are specific to this project.
* One tool instead of Jira + Confluence & SVN.
* The project can have its own build process.

Git solutions
=============================

# Criteria
* The solution can't be hosted. We want to have control over our repositories.
* Has to include an issue tracker.
* Has to include a Wiki/knowledge management facilty.
* A GUI for easy navigation.

  For this reason, those aren't eligible.

      # Github
      * They did it right.
      * Hosted.

      # Bitbucket
      * à la Github.
      * Hosted.

[Not elligible]
# Gitolite
* Git repository hosting on a centralized server.
* Browsable using gitweb.
* Used to be a part of gitlab.

# Gitlab
* Github like. MIT.
* Code Review.
* Wiki, issue tracking.
* Does not use gitolite anymore.
* No cost for up to 10000 projects.

# Gitblit
* Full java stack.
* No issue tracker.
* Not yet, but comming.

# Gitorious

